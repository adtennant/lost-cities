{"version":3,"sources":["components/results.tsx","state/ducks/scorecard/selectors.ts","containers/resultsContainer.tsx","components/addPlayerButton.tsx","state/ducks/scorecard/actions.ts","containers/addPlayerButtonContainer.tsx","components/playerList.tsx","containers/playerListContainer.tsx","components/scorecard.tsx","containers/scorecardContainer.tsx","components/scorecards.tsx","containers/scorecardsContainer.tsx","App.tsx","serviceWorker.ts","state/ducks/scorecard/reducers.ts","state/ducks/index.ts","state/middlewares/logger.ts","state/index.ts","index.tsx","state/configureStore.ts"],"names":["expeditions","key","color","Scorecard","results","Table","TableHead","TableRow","TableCell","align","colSpan","length","TableBody","sort","a","b","total","map","result","id","component","scope","name","expedition","style","backgroundColor","String","getEntries","state","scorecard","entries","calculateScore","cards","wager","reduce","card","getResults","createSelector","entry","yellow","white","blue","green","red","purple","ScorecardContainer","stateToProps","useSelector","AddPlayerButton","onSubmit","useState","openDialog","setOpenDialog","setName","error","setError","theme","useTheme","onClose","Zoom","in","position","bottom","spacing","right","timeout","transitions","duration","enteringScreen","unmountOnExit","Fab","onClick","Dialog","aria-labelledby","open","DialogTitle","e","preventDefault","hasError","noValidate","DialogContent","TextField","autoFocus","fullWidth","label","onChange","target","value","required","DialogActions","Button","type","addPlayer","createStandardAction","addCard","removeCard","changeWager","AddPlayerButtonContainer","dispatch","useDispatch","dispatchToProps","useCallback","PlayerList","PlayerListContainer","CardIcon","display","width","height","border","borderRadius","onAddCard","onRemoveCard","onChangeWager","tableLayout","defaultValue","inputProps","min","max","textAlign","parsed","parseInt","isNaN","Checkbox","checked","includes","ownProps","Scorecards","React","undefined","expanded","setExpanded","ExpansionPanel","panel","_","isExpanded","ExpansionPanelSummary","expandIcon","Typography","ExpansionPanelDetails","ScorecardsContainer","tabs","children","App","tabIndex","setTabIndex","flexDirection","overflow","AppBar","Toolbar","marginRight","variant","Tabs","indicatorColor","event","newIndex","tab","Tab","flexGrow","i","role","hidden","Box","p","Boolean","window","location","hostname","match","scorecardReducer","createReducer","handleAction","actions","action","uuid","payload","cardToRemove","filter","rootReducer","combineReducers","logger","configureStore","store","initialState","middlewares","applyMiddleware","createStore","initialReduxState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9e7e169.chunk.js","sourcesContent":["import React from \"react\";\nimport { IScorecardResult } from \"../state/ducks/scorecard/types\";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow\n} from \"@material-ui/core\";\n\nconst expeditions: {\n  key: \"yellow\" | \"white\" | \"blue\" | \"green\" | \"red\" | \"purple\";\n  color: string;\n}[] = [\n  { key: \"yellow\", color: \"#e0bb14\" },\n  { key: \"white\", color: \"#4c5055\" },\n  { key: \"blue\", color: \"#023ece\" },\n  { key: \"green\", color: \"#159b3b\" },\n  { key: \"red\", color: \"#f8282a\" },\n  { key: \"purple\", color: \"#452cbb\" }\n];\n\ntype Props = {\n  results: IScorecardResult[];\n};\n\nconst Scorecard: React.FC<Props> = ({ results }) => {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Name</TableCell>\n          <TableCell align=\"center\" colSpan={expeditions.length}>\n            Scores\n          </TableCell>\n          <TableCell align=\"center\">Total</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {results\n          .sort((a, b) => b.total - a.total)\n          .map(result => (\n            <TableRow key={result.id}>\n              <TableCell component=\"th\" scope=\"row\">\n                {result.name}\n              </TableCell>\n              {expeditions.map(expedition => (\n                <TableCell\n                  key={expedition.key}\n                  align=\"center\"\n                  style={{ backgroundColor: expedition.color, color: \"white\" }}\n                >\n                  {String(result[expedition.key])}\n                </TableCell>\n              ))}\n              <TableCell align=\"center\">{result.total}</TableCell>\n            </TableRow>\n          ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default Scorecard;\n","import { IApplicationState } from \"..\";\nimport { IScorecardResult, IExpedition } from \"./types\";\nimport { createSelector } from \"reselect\";\n\nexport const getEntries = (state: IApplicationState) => state.scorecard.entries;\n\nconst calculateScore = (expedition: IExpedition) => {\n  if (expedition.cards.length === 0 && expedition.wager === 0) {\n    return 0;\n  }\n\n  const points = expedition.cards.reduce((total, card) => total + card, 0);\n  const subtotal = points - 20;\n\n  const total = subtotal * (expedition.wager + 1);\n  const bonus = expedition.cards.length >= 8 ? 20 : 0;\n  return total + bonus;\n};\n\nexport const getResults = createSelector(\n  getEntries,\n  (entries): IScorecardResult[] =>\n    entries\n      .map(entry => ({\n        id: entry.id,\n        name: entry.name,\n        yellow: calculateScore(entry.yellow),\n        white: calculateScore(entry.white),\n        blue: calculateScore(entry.blue),\n        green: calculateScore(entry.green),\n        red: calculateScore(entry.red),\n        purple: calculateScore(entry.purple)\n      }))\n      .map(result => ({\n        ...result,\n        total:\n          result.yellow +\n          result.white +\n          result.blue +\n          result.green +\n          result.red +\n          result.purple\n      }))\n);\n","import React from \"react\";\nimport Results from \"../components/results\";\nimport { useSelector } from \"react-redux\";\nimport { IApplicationState } from \"../state/ducks\";\nimport { getResults } from \"../state/ducks/scorecard/selectors\";\n\nconst ScorecardContainer = () => {\n  const stateToProps = useSelector((state: IApplicationState) => ({\n    results: getResults(state)\n  }));\n\n  return <Results {...stateToProps} />;\n};\n\nexport default ScorecardContainer;\n","import React, { useState } from \"react\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Fab,\n  Zoom,\n  useTheme,\n  TextField\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\ntype Props = {\n  onSubmit: (name: string) => void;\n};\n\nconst AddPlayerButton: React.FC<Props> = ({ onSubmit }) => {\n  const [openDialog, setOpenDialog] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [error, setError] = useState(false);\n\n  const theme = useTheme();\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const hasError = !name || name.length === 0;\n    setError(hasError);\n\n    if (hasError) {\n      return;\n    }\n\n    onSubmit(name);\n    onClose();\n  };\n\n  const onClose = () => {\n    setError(false);\n    setName(\"\");\n    setOpenDialog(false);\n  };\n\n  return (\n    <>\n      <Zoom\n        in\n        style={{\n          position: \"absolute\",\n          bottom: theme.spacing(2),\n          right: theme.spacing(2)\n        }}\n        timeout={theme.transitions.duration.enteringScreen}\n        unmountOnExit\n      >\n        <Fab onClick={() => setOpenDialog(true)}>\n          <AddIcon />\n        </Fab>\n      </Zoom>\n      <Dialog\n        aria-labelledby=\"player-dialog-title\"\n        open={openDialog}\n        onClose={onClose}\n      >\n        <DialogTitle id=\"player-dialog-title\">Add Player</DialogTitle>\n        <form onSubmit={handleSubmit} noValidate>\n          <DialogContent>\n            <TextField\n              autoFocus\n              error={error}\n              fullWidth\n              id=\"player-name\"\n              label=\"Name\"\n              name=\"name\"\n              onChange={handleChange}\n              required\n              value={name}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={onClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button type=\"submit\" color=\"primary\">\n              Save\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </>\n  );\n};\n\nexport default AddPlayerButton;\n","import { createStandardAction } from \"typesafe-actions\";\n\nexport const addPlayer = createStandardAction(\"@@scorecard/ADD_PLAYER\")<\n  string\n>();\n\nexport const addCard = createStandardAction(\"@@scorecard/ADD_CARD\")<{\n  id: string;\n  expedition: \"yellow\" | \"white\" | \"blue\" | \"green\" | \"red\" | \"purple\";\n  card: number;\n}>();\n\nexport const removeCard = createStandardAction(\"@@scorecard/REMOVE_CARD\")<{\n  id: string;\n  expedition: \"yellow\" | \"white\" | \"blue\" | \"green\" | \"red\" | \"purple\";\n  card: number;\n}>();\n\nexport const changeWager = createStandardAction(\"@@scorecard/CHANGE_WAGER\")<{\n  id: string;\n  expedition: \"yellow\" | \"white\" | \"blue\" | \"green\" | \"red\" | \"purple\";\n  wager: number;\n}>();\n","import React, { useCallback } from \"react\";\nimport AddPlayerButton from \"../components/addPlayerButton\";\nimport { useDispatch } from \"react-redux\";\nimport { addPlayer } from \"../state/ducks/scorecard/actions\";\n\nconst AddPlayerButtonContainer = () => {\n  const dispatch = useDispatch();\n\n  const dispatchToProps = {\n    onSubmit: useCallback(name => dispatch(addPlayer(name)), [dispatch])\n  };\n\n  return <AddPlayerButton {...dispatchToProps} />;\n};\n\nexport default AddPlayerButtonContainer;\n","import React from \"react\";\nimport { IScorecardEntry } from \"../state/ducks/scorecard/types\";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow\n} from \"@material-ui/core\";\n\ntype Props = {\n  entries: IScorecardEntry[];\n};\n\nconst PlayerList: React.FC<Props> = ({ entries }) => {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Name</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {entries.map(entry => (\n          <TableRow key={entry.id}>\n            <TableCell component=\"th\" scope=\"row\">\n              {entry.name}\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default PlayerList;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { IApplicationState } from \"../state/ducks\";\nimport { getEntries } from \"../state/ducks/scorecard/selectors\";\nimport PlayerList from \"../components/playerList\";\n\nconst PlayerListContainer = () => {\n  const stateToProps = useSelector((state: IApplicationState) => ({\n    entries: getEntries(state)\n  }));\n\n  return <PlayerList {...stateToProps} />;\n};\n\nexport default PlayerListContainer;\n","import React from \"react\";\nimport { IScorecardEntry } from \"../state/ducks/scorecard/types\";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TextField,\n  Checkbox\n} from \"@material-ui/core\";\n\nconst expeditions: {\n  key: \"yellow\" | \"white\" | \"blue\" | \"green\" | \"red\" | \"purple\";\n  color: string;\n}[] = [\n  { key: \"yellow\", color: \"#e0bb14\" },\n  { key: \"white\", color: \"#4c5055\" },\n  { key: \"blue\", color: \"#023ece\" },\n  { key: \"green\", color: \"#159b3b\" },\n  { key: \"red\", color: \"#f8282a\" },\n  { key: \"purple\", color: \"#452cbb\" }\n];\n\nconst cards = [2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconst CardIcon: React.FC<{ color: string }> = ({ color }) => (\n  <span\n    style={{\n      display: \"inline-block\",\n      width: \"16px\",\n      height: \"24px\",\n      border: \"2px solid black\",\n      borderRadius: \"3px\",\n      backgroundColor: color\n    }}\n  ></span>\n);\n\ntype Props = {\n  entry: IScorecardEntry;\n  onAddCard: (\n    id: string,\n    expedition: \"yellow\" | \"white\" | \"blue\" | \"green\" | \"red\" | \"purple\",\n    card: number\n  ) => void;\n  onRemoveCard: (\n    id: string,\n    expedition: \"yellow\" | \"white\" | \"blue\" | \"green\" | \"red\" | \"purple\",\n    card: number\n  ) => void;\n  onChangeWager: (\n    id: string,\n    expedition: \"yellow\" | \"white\" | \"blue\" | \"green\" | \"red\" | \"purple\",\n    wager: number\n  ) => void;\n};\n\nconst Scorecard: React.FC<Props> = ({\n  entry,\n  onAddCard,\n  onRemoveCard,\n  onChangeWager\n}) => {\n  return (\n    <Table style={{ tableLayout: \"fixed\" }}>\n      <TableHead>\n        <TableRow>\n          <TableCell></TableCell>\n          {expeditions.map(expedition => (\n            <TableCell key={expedition.key} align=\"center\">\n              <CardIcon color={expedition.color} />\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        <TableRow>\n          <TableCell align=\"center\">Wager</TableCell>\n          {expeditions.map(expedition => {\n            return (\n              <TableCell key={expedition.key} align=\"center\">\n                <TextField\n                  defaultValue={0}\n                  fullWidth\n                  inputProps={{\n                    min: 0,\n                    max: 4,\n                    style: { textAlign: \"center\" }\n                  }}\n                  onChange={e => {\n                    const parsed = parseInt(e.target.value, 10);\n                    onChangeWager(\n                      entry.id,\n                      expedition.key,\n                      !isNaN(parsed) ? parsed : 0\n                    );\n                  }}\n                  type=\"number\"\n                />\n              </TableCell>\n            );\n          })}\n        </TableRow>\n        {cards.map(card => (\n          <TableRow key={card}>\n            <TableCell component=\"th\" scope=\"row\" align=\"center\">\n              {card}\n            </TableCell>\n            {expeditions.map(expedition => (\n              <TableCell key={expedition.key} align=\"center\">\n                <Checkbox\n                  checked={entry[expedition.key].cards.includes(card)}\n                  style={{ color: expedition.color }}\n                  onChange={e => {\n                    const fn = e.target.checked ? onAddCard : onRemoveCard;\n                    fn(entry.id, expedition.key, card);\n                  }}\n                />\n              </TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default Scorecard;\n","import React, { useCallback } from \"react\";\nimport Scorecard from \"../components/scorecard\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  changeWager,\n  addCard,\n  removeCard\n} from \"../state/ducks/scorecard/actions\";\nimport { IScorecardEntry } from \"../state/ducks/scorecard/types\";\n\ntype Props = {\n  entry: IScorecardEntry;\n};\n\nconst ScorecardContainer: React.FC<Props> = ownProps => {\n  const dispatch = useDispatch();\n\n  const dispatchToProps = {\n    onAddCard: useCallback(\n      (id, expedition, card) => dispatch(addCard({ id, expedition, card })),\n      [dispatch]\n    ),\n    onRemoveCard: useCallback(\n      (id, expedition, card) => dispatch(removeCard({ id, expedition, card })),\n      [dispatch]\n    ),\n    onChangeWager: useCallback(\n      (id, expedition, wager) =>\n        dispatch(changeWager({ id, expedition, wager })),\n      [dispatch]\n    )\n  };\n\n  return <Scorecard {...ownProps} {...dispatchToProps} />;\n};\n\nexport default ScorecardContainer;\n","import React from \"react\";\nimport {\n  Typography,\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails\n} from \"@material-ui/core\";\nimport ScorecardContainer from \"../containers/scorecardContainer\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { IScorecardEntry } from \"../state/ducks/scorecard/types\";\n\ntype Props = {\n  entries: IScorecardEntry[];\n};\n\nconst Scorecards: React.FC<Props> = ({ entries }) => {\n  const [expanded, setExpanded] = React.useState<string | undefined>(undefined);\n\n  const handleChange = (panel: string) => (\n    _: React.ChangeEvent<{}>,\n    isExpanded: boolean\n  ) => {\n    setExpanded(isExpanded ? panel : undefined);\n  };\n\n  return (\n    <>\n      {entries.map(entry => (\n        <ExpansionPanel\n          key={entry.id}\n          expanded={expanded === entry.id}\n          onChange={handleChange(entry.id)}\n        >\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography>{entry.name}</Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <Typography component=\"div\">\n              <ScorecardContainer entry={entry} />\n            </Typography>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n      ))}\n    </>\n  );\n};\n\nexport default Scorecards;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { IApplicationState } from \"../state/ducks\";\nimport { getEntries } from \"../state/ducks/scorecard/selectors\";\nimport Scorecards from \"../components/scorecards\";\n\nconst ScorecardsContainer = () => {\n  const stateToProps = useSelector((state: IApplicationState) => ({\n    entries: getEntries(state)\n  }));\n\n  return <Scorecards {...stateToProps} />;\n};\n\nexport default ScorecardsContainer;\n","import React from \"react\";\nimport {\n  AppBar,\n  Box,\n  Toolbar,\n  Typography,\n  Tab,\n  Tabs,\n  useTheme\n} from \"@material-ui/core\";\nimport ResultsContainer from \"./containers/resultsContainer\";\nimport AddPlayerButtonContainer from \"./containers/addPlayerButtonContainer\";\nimport PlayerListContainer from \"./containers/playerListContainer\";\nimport ScorecardsContainer from \"./containers/scorecardsContainer\";\nimport ChangeHistoryIcon from \"@material-ui/icons/ChangeHistory\";\n\nconst tabs = [\n  {\n    label: \"Players\",\n    children: (\n      <>\n        <PlayerListContainer />\n        <AddPlayerButtonContainer />\n      </>\n    )\n  },\n  {\n    label: \"Scorecard\",\n    children: <ScorecardsContainer />\n  },\n  {\n    label: \"Results\",\n    children: <ResultsContainer />\n  }\n];\n\nconst App = () => {\n  const theme = useTheme();\n\n  const [tabIndex, setTabIndex] = React.useState(0);\n\n  const handleChange = (event: React.ChangeEvent<{}>, newIndex: number) => {\n    setTabIndex(newIndex);\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100vh\",\n        overflow: \"scroll\"\n      }}\n    >\n      <AppBar position=\"static\" color=\"default\">\n        <Toolbar>\n          <ChangeHistoryIcon style={{ marginRight: theme.spacing(2) }} />\n          <Typography variant=\"h6\" color=\"inherit\">\n            Lost Cities Scorecard\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          indicatorColor=\"primary\"\n          onChange={handleChange}\n          value={tabIndex}\n          variant=\"fullWidth\"\n        >\n          {tabs.map(tab => (\n            <Tab key={tab.label} label={tab.label} />\n          ))}\n        </Tabs>\n      </AppBar>\n\n      <div style={{ flexGrow: 1, overflow: \"scroll\" }}>\n        {tabs.map((tab, i) => (\n          <Typography\n            key={tab.label}\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={tabIndex !== i}\n          >\n            <Box p={2}>{tab.children}</Box>\n          </Typography>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ActionType, createReducer } from \"typesafe-actions\";\nimport uuid from \"uuid/v4\";\n\nimport * as actions from \"./actions\";\nimport { IScorecardEntry } from \"./types\";\n\nexport interface IScorecardState {\n  readonly entries: IScorecardEntry[];\n}\n\nexport const initialState: IScorecardState = {\n  entries: []\n};\n\nexport type ScorecardAction = ActionType<typeof actions>;\n\nexport const scorecardReducer = createReducer<IScorecardState, ScorecardAction>(\n  initialState\n)\n  .handleAction(actions.addPlayer, (state, action) => ({\n    ...state,\n    entries: [\n      ...state.entries,\n      {\n        id: uuid(),\n        name: action.payload,\n        yellow: { cards: [], wager: 0 },\n        white: { cards: [], wager: 0 },\n        blue: { cards: [], wager: 0 },\n        green: { cards: [], wager: 0 },\n        red: { cards: [], wager: 0 },\n        purple: { cards: [], wager: 0 }\n      }\n    ]\n  }))\n  .handleAction(actions.addCard, (state, action) => {\n    const { id, expedition, card } = action.payload;\n\n    return {\n      ...state,\n      entries: state.entries.map(entry =>\n        entry.id === id\n          ? {\n              ...entry,\n              [expedition]: {\n                ...entry[expedition],\n                cards: [...entry[expedition].cards, card]\n              }\n            }\n          : entry\n      )\n    };\n  })\n  .handleAction(actions.removeCard, (state, action) => {\n    const { id, expedition, card: cardToRemove } = action.payload;\n\n    return {\n      ...state,\n      entries: state.entries.map(entry =>\n        entry.id === id\n          ? {\n              ...entry,\n              [expedition]: {\n                ...entry[expedition],\n                cards: entry[expedition].cards.filter(\n                  card => card !== cardToRemove\n                )\n              }\n            }\n          : entry\n      )\n    };\n  })\n  .handleAction(actions.changeWager, (state, action) => {\n    const { id, expedition, wager } = action.payload;\n\n    return {\n      ...state,\n      entries: state.entries.map(entry =>\n        entry.id === id\n          ? { ...entry, [expedition]: { ...entry[expedition], wager } }\n          : entry\n      )\n    };\n  });\n","import { combineReducers } from \"redux\";\nimport { IScorecardState, scorecardReducer } from \"./scorecard/reducers\";\n\nexport interface IApplicationState {\n  scorecard: IScorecardState;\n}\n\nexport const rootReducer = combineReducers<IApplicationState>({\n  scorecard: scorecardReducer\n});\n","import logger from \"redux-logger\";\nexport default logger;\n","import configureStore from \"./configureStore\";\n\nexport default configureStore;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./state\";\n\nconst initialState = (window as any).initialReduxState;\nconst store = configureStore(initialState);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { applyMiddleware, createStore, Store } from \"redux\";\nimport { IApplicationState, rootReducer } from \"./ducks/index\";\nimport logger from \"./middlewares/logger\";\n\nexport default function configureStore(\n  initialState: IApplicationState\n): Store<IApplicationState> {\n  const middlewares = applyMiddleware(logger); // Create Store\n  const store = createStore(rootReducer, initialState, middlewares);\n\n  return store;\n}\n"],"sourceRoot":""}